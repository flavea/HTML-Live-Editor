const parser = {
    input: document.getElementById('input'),
    output: document.getElementById('output'),
    render: function (type) {
        let id = 'html-' + parser.uuid()
        const url = new URLSearchParams(window.location.search)
        const drafts = Object.keys(localStorage).filter(draft => draft.startsWith('html-'))
        if (url.has('id')) {
            id = url.get('id')
            if (typeof type === 'boolean') {
                window.editor.setValue(localStorage.getItem(id))
            }
        } else if (drafts.length > 0) {
            id = drafts[0]
            if (typeof type === 'boolean') {
                window.editor.setValue(localStorage.getItem(id))
            }
        }

        let content = window.editor.getValue()
        
        parser.output.innerHTML = content

        localStorage.setItem(id, content)
        history.pushState('', "HTML Live Editor", "?id=" + id)
        if (typeof type === 'object') editor.setDrafts(true)
    },
    uuid: function () {
        return (Object.keys(localStorage).filter(draft => draft.startsWith('html-')).length + 1) + '-' + ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        )
    },
    minify: function () {
        var minify = require('html-minifier').minify;
        const minified = minify(window.editor.getValue(), {
            "caseSensitive": false,
            "collapseBooleanAttributes": true,
            "collapseInlineTagWhitespace": false,
            "collapseWhitespace": true,
            "conservativeCollapse": false,
            "decodeEntities": true,
            "html5": true,
            "includeAutoGeneratedTags": false,
            "keepClosingSlash": false,
            "minifyCSS": true,
            "minifyJS": true,
            "preserveLineBreaks": false,
            "preventAttributesEscaping": false,
            "processConditionalComments": true,
            "processScripts": ["text/html"],
            "removeAttributeQuotes": true,
            "removeComments": true,
            "removeEmptyAttributes": true,
            "removeEmptyElements": false,
            "removeOptionalTags": true,
            "removeRedundantAttributes": true,
            "removeScriptTypeAttributes": true,
            "removeStyleLinkTypeAttributes": true,
            "removeTagWhitespace": true,
            "sortAttributes": true,
            "sortClassName": true,
            "trimCustomFragments": true,
            "useShortDoctype": true
        })
        window.editor.setValue(minified)
    },
    prettify: function () {
        const prettified = html_beautify(window.editor.getValue(), {
            "indent_size": "4",
            "indent_char": " ",
            "max_preserve_newlines": "5",
            "preserve_newlines": true,
            "keep_array_indentation": false,
            "break_chained_methods": false,
            "indent_scripts": "normal",
            "brace_style": "collapse",
            "space_before_conditional": true,
            "unescape_strings": false,
            "jslint_happy": false,
            "end_with_newline": false,
            "wrap_line_length": "0",
            "indent_inner_html": false,
            "comma_first": false,
            "e4x": false,
            "indent_empty_lines": false,
            "unformatted": []
        })
        window.editor.setValue(prettified)
    },
    init: function () {
        const url = new URLSearchParams(window.location.search)
        let initialContent = '<b>Hey,</b> everyone!'
        if (localStorage && localStorage.content && localStorage.content != '') {
            const id = 'draft-' + parser.uuid()
            initialContent = localStorage.content
            localStorage.setItem(id, initialContent)
        } else if (url.has('id')) {
            const id = url.get('id')
            initialContent = localStorage.getItem(id)
            history.replaceState('', "HTML Live Editor", "?id=" + id)
        }

        localStorage.removeItem('content')

        ace.require("ace/ext/language_tools");
        const textEditor = ace.edit("input");
        textEditor.session.setMode("ace/mode/html");
        textEditor.setTheme("ace/theme/clouds");
        textEditor.session.setUseWrapMode(true)
        textEditor.setOptions({
            enableBasicAutocompletion: true,
            enableSnippets: true,
            enableLiveAutocompletion: true,
            wrapBehavioursEnabled: 'true',
            fontSize: 14,
            fontFamily: 'Fira Code'
        });

        textEditor.on("change", function () {
            parser.render()
        })

        window.editor = textEditor

        textEditor.setValue(initialContent)
    }
}